Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Elm.Keyboard.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Prelude = Elm.Prelude.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Window = Elm.Window.make(_elm);
   var _op = {};
   var flappyColor = A3(Color.rgb,
   255,
   0,
   0);
   var display = function (game) {
      return A3(Graphics.Collage.collage,
      1000,
      1000,
      _J.toList([Graphics.Collage.move({ctor: "_Tuple2"
                                       ,_0: 0
                                       ,_1: game.flappy.y})(Graphics.Collage.filled(flappyColor)(A2(Graphics.Collage.oval,
      15,
      15)))]));
   };
   var flap = F2(function (f,
   flappy) {
      return _U.replace([["dy"
                         ,f ? 5 : flappy.dy]],
      flappy);
   });
   var gravity = F2(function (d,
   flappy) {
      return _U.replace([["y"
                         ,A2(Basics.max,
                         -500,
                         flappy.y + flappy.dy * d)]
                        ,["dy"
                         ,A2(Basics.max,
                         -50,
                         flappy.dy - 0.8 * Math.pow(d,
                         2))]],
      flappy);
   });
   var stepFlappy = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function ($) {
                 return gravity(_v0._0)(flap(_v0._1)($));
              };}
         _E.Case($moduleName,
         "on line 20, column 21 to 39");
      }();
   };
   var step = F2(function (input,
   game) {
      return _U.replace([["flappy"
                         ,A2(stepFlappy,
                         input,
                         game.flappy)]],
      game);
   });
   var initialGame = {_: {}
                     ,flappy: {_: {},dy: -1,y: 0}};
   var Bird = F2(function (a,b) {
      return {_: {},dy: b,y: a};
   });
   var delta = A2(Signal._op["<~"],
   function (t) {
      return t / 20;
   },
   Time.fps(60));
   var input = A2(Signal.sampleOn,
   delta,
   A2(Signal._op["~"],
   A2(Signal._op["<~"],
   F2(function (v0,v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }),
   delta),
   Keyboard.space));
   var main = A2(Signal._op["<~"],
   display,
   A3(Signal.foldp,
   step,
   initialGame,
   input));
   _elm.Main.values = {_op: _op
                      ,delta: delta
                      ,input: input
                      ,initialGame: initialGame
                      ,gravity: gravity
                      ,flap: flap
                      ,stepFlappy: stepFlappy
                      ,step: step
                      ,flappyColor: flappyColor
                      ,display: display
                      ,main: main
                      ,Bird: Bird};
   return _elm.Main.values;
};